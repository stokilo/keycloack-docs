server.port=8080

# Spring Security OAuth2 Resource Server Properties
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/realms/spring-boot-exercise

# Spring Security OAuth2 Client Properties (useful for token introspection if needed, and for some auto-configs)
# The client registration name 'keycloak' here is arbitrary but conventional.
spring.security.oauth2.client.registration.keycloak.client-id=spring-boot-app
spring.security.oauth2.client.registration.keycloak.client-secret=FZp6Hd4KfNpO70O60o6uHEyJEqlgWSTa
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
# IMPORTANT: For this exercise, we will initially OMIT specific scopes here.
# We want to see how Keycloak's "Default" and "Optional" settings influence the token.
# spring.security.oauth2.client.registration.keycloak.scope=openid, profile, email, product:read, product:write

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/realms/spring-boot-exercise
# Optional: If Keycloak uses a self-signed cert or is not on localhost during development
# spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username