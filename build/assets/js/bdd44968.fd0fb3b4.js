"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9550],{7951:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>m,contentTitle:()=>h,default:()=>y,frontMatter:()=>d,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"keycloack-resource-server","title":"Playground","description":"This is playground for Keycloack documentation and exercises!","source":"@site/docs/keycloack-resource-server.mdx","sourceDirName":".","slug":"/keycloack-resource-server","permalink":"/docs/keycloack-resource-server","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/keycloack-resource-server.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Keycloack Resource Server","sidebar_position":3},"sidebar":"tutorialSidebar"}');var o=t(4848),i=t(8453),a=t(1910),s=t.n(a),c=t(6540),u=t(7981);const l=({code:e,language:r,theme:t})=>{const[n,i]=(0,c.useState)(""),[a,s]=(0,c.useState)(!1);return(0,c.useEffect)((()=>{!async function(){try{const r=(await(0,u.O_)({themes:[t],langs:["java"]})).codeToHtml(e,{lang:"java",theme:t});i(r),s(!0)}catch(r){console.error("Error highlighting code with Shiki:",r),i(e),s(!0)}}()}),[e,r,t]),a?(0,o.jsx)("div",{dangerouslySetInnerHTML:{__html:n}}):(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"Loading..."})})},d={sidebar_label:"Keycloack Resource Server",sidebar_position:3},h="Playground",m={},p=[];function g(e){const r={h1:"h1",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"playground",children:"Playground"})}),"\n",(0,o.jsxs)(r.p,{children:["This is playground for Keycloack documentation ",(0,o.jsx)(r.strong,{children:"and exercises"}),"!"]}),"\n",(0,o.jsx)(r.p,{children:"I would like to documenet changes on UI and step by step code modifications."}),"\n",(0,o.jsxs)(r.p,{children:["For that I need a support for rich components like ",(0,o.jsx)(r.strong,{children:"before and after viewer"})," and more."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"SVG.js"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"before-after"})}),"\n","\n",(0,o.jsx)(s(),{firstImage:{imageUrl:"/img/2.png"},secondImage:{imageUrl:"/img/1.png"},delimiterColor:"red"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"java code with shiki"})}),"\n","\n",(0,o.jsx)(r.p,{children:"Here's some Java code with Shiki:"}),"\n",(0,o.jsx)(l,{language:"java",theme:"catppuccin-frappe",code:'\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(jsr250Enabled = true) // Umo\u017cliwia @RolesAllowed\npublic class SecurityConfig {\n\n  @Bean\n  public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n      http\n              .authorizeHttpRequests(authorizeRequests ->\n                      authorizeRequests\n                              .requestMatchers("/api/menu/public").permitAll()\n                              .requestMatchers("/api/orders/my-orders").hasRole("customer") // Oczekuje roli \'ROLE_customer\'\n                              .anyRequest().authenticated()\n              )\n              .oauth2ResourceServer(oauth2 -> oauth2\n                      .jwt(jwt -> jwt\n                              .jwtAuthenticationConverter(jwtAuthenticationConverter())\n                      )\n              );\n      return http.build();\n  }\n\n  // Konwerter do mapowania r\xf3l z JWT na GrantedAuthority w Spring Security\n  // Domy\u015blnie Spring Security szuka r\xf3l w claimie \'scope\' lub \'scp\'.\n  // Keycloak umieszcza role realmu w \'realm_access.roles\', a role klienta w \'resource_access.<client_id>.roles\'.\n  // Ten konwerter zapewni, \u017ce role z Keycloak b\u0119d\u0105 poprawnie interpretowane (z prefiksem ROLE_).\n  @Bean\n  public JwtAuthenticationConverter jwtAuthenticationConverter() {\n      JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();\n      // Usu\u0144 domy\u015blny prefiks "SCOPE_" (je\u015bli jest)\n      grantedAuthoritiesConverter.setAuthorityPrefix("");\n      // Ustaw prefiks "ROLE_" dla r\xf3l, aby zgadza\u0142o si\u0119 z hasRole("customer")\n      // Je\u015bli twoje role w Keycloak s\u0105 ju\u017c np. "ROLE_customer", mo\u017cesz pomin\u0105\u0107 setAuthorityPrefix("ROLE_")\n      // i u\u017cywa\u0107 grantedAuthoritiesConverter.setAuthoritiesClaimName("realm_access.roles");\n      // ale dla prostoty zostawiamy domy\u015blne dzia\u0142anie i dodajemy ROLE_ r\u0119cznie.\n\n      // W nowszych wersjach Spring Security mo\u017cna tak skonfigurowa\u0107, aby prefiks "ROLE_" by\u0142 dodawany automatycznie\n      // do warto\u015bci z okre\u015blonego claimu.\n      // Dla uproszczenia, je\u015bli role w Keycloak to \'customer\', \'admin\',\n      // to chcemy, aby Spring Security widzia\u0142 je jako \'ROLE_customer\', \'ROLE_admin\'.\n      // Standardowy JwtGrantedAuthoritiesConverter mo\u017ce nie dodawa\u0107 \'ROLE_\' prefixu automatycznie\n      // do r\xf3l z claim\xf3w innych ni\u017c \'scope\'.\n      // Poni\u017cszy spos\xf3b jest bardziej jawny i elastyczny.\n\n      JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n      jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwt -> {\n          var authorities = grantedAuthoritiesConverter.convert(jwt); // Pobiera scope\'y\n          var realmAccess = jwt.getClaimAsMap("realm_access");\n          if (realmAccess != null) {\n              var roles = (java.util.Collection<String>) realmAccess.get("roles");\n              if (roles != null) {\n                  roles.stream()\n                          .map(roleName -> "ROLE_" + roleName) // Dodajemy prefiks ROLE_\n                          .map(org.springframework.security.core.authority.SimpleGrantedAuthority::new)\n                          .forEach(authorities::add);\n              }\n          }\n          return authorities;\n      });\n\n      return jwtAuthenticationConverter;\n  }\n}\n\n'})]})}function y(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}}}]);